### perl: janus/code/b.seco
use strict;
use File::Spec;

use Hermes;
use Vulcan::Sort;
use Vulcan::OptConf;

my ( $option, %seco );

BEGIN
{
    $option = Vulcan::OptConf->load();
    %seco = $option->dump( 'seco' );
}

use lib $seco{lib};
use SECO::Conf;

return sub
{
    my ( %param, @batch ) = @_;
    my $dc = $param{param}{dc} || [ qw( bjdt zzbc zzbc2 shjc ) ];
    my %dc = map { '@' . lc $dc->[$_] => $_ + 1 } 0 .. $#$dc;
    my $max = 99;

    my $sort = Vulcan::Sort->new
    (
        dc => sub { $dc{ $_->[2] } ||= ++ $max },
        replica => sub { $_->[1] },
    );

    my @seco = grep { $_->[1] && $_->[1] =~ /\d/ }
        map { [ split /(\d+)/, $_, 2 ] } Hermes->new( $option->dump( 'range' ) )
            ->load( $param{target} )->list();

    for my $seco ( $sort->run( \@seco, 'dc', 'replica' ) )
    {
        my $i = splice @$seco, 1, 1; $seco = join '', @$seco;
        my $conf = eval
        {
            SECO::Conf->load( File::Spec->join( $seco{conf}, $seco ) )
        };
        push @batch, $@ ? next : scalar $conf->list( host => $i );
    }
    return @batch;
};
